package uz.gita.appbuilderadmin.presentation.componentsimport android.widget.Toastimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.material3.Buttonimport androidx.compose.material3.ButtonDefaultsimport androidx.compose.material3.OutlinedTextFieldimport androidx.compose.material3.OutlinedTextFieldDefaultsimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.Fontimport androidx.compose.ui.text.font.FontFamilyimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport uz.gita.appbuilderadmin.Rimport uz.gita.appbuilderadmin.app.Appimport uz.gita.appbuilderadmin.presentation.screens.constructor.ConstructorContractimport uz.gita.appbuilderadmin.presentation.screens.constructor.SetId@Composablefun RowComponentsInSelector(    uiState: ConstructorContract.UiState,    onEventDispatchers: (ConstructorContract.Intent) -> Unit,) {//    SetId(uiState = uiState, onEventDispatchers = onEventDispatchers)    var text by remember { mutableStateOf("") }    Spacer(modifier = Modifier.size(10.dp))    Text(text = "Question", color = Color.White)    Spacer(modifier = Modifier.size(10.dp))    OutlinedTextField(        modifier = Modifier            .fillMaxWidth()            .height(58.dp)            .padding(horizontal = 15.dp),        value = uiState.selecterAnswer,        singleLine = true,        onValueChange = {            onEventDispatchers.invoke(                ConstructorContract.Intent.ChangeSelectorAnswer(                    it                )            )        },        colors = OutlinedTextFieldDefaults.colors(            focusedBorderColor = Color.LightGray,            unfocusedBorderColor = Color.LightGray,            focusedTextColor = Color.LightGray,            unfocusedTextColor = Color.LightGray        ),        shape = RoundedCornerShape(5.dp)    )    Spacer(modifier = Modifier.size(10.dp))    Text(text = "Item", color = Color.White)    Spacer(modifier = Modifier.size(10.dp))    OutlinedTextField(        modifier = Modifier            .fillMaxWidth()            .height(58.dp)            .padding(horizontal = 15.dp),        value = text,        singleLine = true,        onValueChange = { text = it },        colors = OutlinedTextFieldDefaults.colors(            focusedBorderColor = Color.LightGray,            unfocusedBorderColor = Color.LightGray,            focusedTextColor = Color.LightGray,            unfocusedTextColor = Color.LightGray        ),        shape = RoundedCornerShape(5.dp)    )    Spacer(modifier = Modifier.size(10.dp))    Button(        modifier = Modifier            .padding(bottom = 15.dp)            .width(310.dp)            .height(50.dp),        onClick = {            if (!uiState.selectorItems.contains(text) && text.isNotEmpty()) {                onEventDispatchers.invoke(                    ConstructorContract.Intent.AddItemToSelector(                        text                    )                )                Toast.makeText(                    App.instance,                    "$text is added",                    Toast.LENGTH_SHORT                ).show()                text = ""            } else {                Toast.makeText(                    App.instance,                    "$text is not added",                    Toast.LENGTH_SHORT                ).show()            }        },        shape = RoundedCornerShape(10.dp),        colors = ButtonDefaults.buttonColors(            containerColor = Color(0xff4d648d)        )    ) {        Text(            text = "Add",            style = TextStyle(                fontSize = 18.sp,                fontFamily = FontFamily(listOf(Font(R.font.roboto_regular))),                fontWeight = FontWeight.W400,                textAlign = TextAlign.Center            )        )    }    Spacer(modifier = Modifier.size(10.dp))//    VisibilityComponents(//        uiState = uiState,//        onEventDispatchers = onEventDispatchers//    )}
package uz.gita.appbuilderadmin.presentation.componentsimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material3.Buttonimport androidx.compose.material3.ButtonDefaultsimport androidx.compose.material3.Checkboximport androidx.compose.material3.CheckboxDefaultsimport androidx.compose.material3.OutlinedTextFieldimport androidx.compose.material3.OutlinedTextFieldDefaultsimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.Fontimport androidx.compose.ui.text.font.FontFamilyimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport uz.gita.appbuilderadmin.Rimport uz.gita.appbuilderadmin.presentation.screens.constructor.ConstructorContractimport uz.gita.appbuilderadmin.presentation.screens.constructor.RequiredComponentimport uz.gita.appbuilderadmin.presentation.screens.constructor.SetId@Composablefun ComponentsInRow(    uiState: ConstructorContract.UiState,    onEventDispatchers: (ConstructorContract.Intent) -> Unit,) {    var weight by remember {        mutableStateOf(1f)    }    Spacer(modifier = Modifier.padding(top = 5.dp))    SetId(uiState = uiState, onEventDispatchers = onEventDispatchers)    Spacer(modifier = Modifier.size(10.dp))    Text(        text = "Components in Row",        style = TextStyle(            fontSize = 16.sp,            lineHeight = 24.sp,            fontFamily = FontFamily(listOf(Font(R.font.helvetica))),            fontWeight = FontWeight.W400,            color = Color.White        )    )    Spacer(modifier = Modifier.size(8.dp))    DemoSpinner(        list = uiState.componentList.filter { it != "Row" },        preselected = if (uiState.selectedComponent == "Row") "Input" else uiState.selectedComponent,        onSelectionChanged = {            onEventDispatchers(                ConstructorContract.Intent.ChangingSelectedComponentInRow(                    it                )            )        },        modifier = Modifier            .fillMaxWidth()            .height(56.dp)    ) {}   when(uiState.selectedComponentInRow){       "Input" -> {           SetId(uiState = uiState, onEventDispatchers = onEventDispatchers)           RequiredComponent(onEventDispatchers)           Spacer(modifier = Modifier.size(10.dp))           Text(               text = "Set Type",               style = TextStyle(                   fontSize = 16.sp,                   lineHeight = 24.sp,                   fontFamily = FontFamily(listOf(Font(R.font.helvetica))),                   fontWeight = FontWeight.W400,                   color = Color.White               )           )           Spacer(modifier = Modifier.size(10.dp))           DemoSpinner(               list = uiState.inputTypeList,               preselected = uiState.selectedInputType,               onSelectionChanged = {                   onEventDispatchers(                       ConstructorContract.Intent.ChangingSelectedInputType(it)                   )               },               modifier = Modifier                   .fillMaxWidth()                   .height(56.dp)           ) {}           Spacer(modifier = Modifier.size(10.dp))           Text(               text = "Set Place Holder",               style = TextStyle(                   fontSize = 16.sp,                   lineHeight = 24.sp,                   fontFamily = FontFamily(listOf(Font(R.font.helvetica))),                   fontWeight = FontWeight.W400,                   color = Color.White               )           )           Spacer(modifier = Modifier.size(10.dp))           OutlinedTextField(               modifier = Modifier                   .fillMaxWidth()                   .height(58.dp)                   .padding(horizontal = 15.dp),               value = uiState.placeHolder,               singleLine = true,               onValueChange = {                   onEventDispatchers(                       ConstructorContract.Intent.ChangingPlaceholder(                           it                       )                   )               },               colors = OutlinedTextFieldDefaults.colors(                   focusedBorderColor = Color.LightGray,                   unfocusedBorderColor = Color.LightGray,                   focusedTextColor = Color.LightGray,                   unfocusedTextColor = Color.LightGray               ),               shape = RoundedCornerShape(5.dp)           )           Spacer(modifier = Modifier.size(10.dp))           if (uiState.selectedInputType == "Text") {               Text(                   text = "Set Max Length",                   style = TextStyle(                       fontSize = 16.sp,                       lineHeight = 24.sp,                       fontFamily = FontFamily(listOf(Font(R.font.helvetica))),                       fontWeight = FontWeight.W400,                       color = Color.White                   )               )               Spacer(modifier = Modifier.size(10.dp))               Row(                   modifier = Modifier                       .fillMaxWidth()                       .padding(horizontal = 15.dp),                   verticalAlignment = Alignment.CenterVertically               ) {                   Spacer(modifier = Modifier.size(5.dp))                   Checkbox(                       checked = uiState.isMaxLengthForTextEnabled,                       onCheckedChange = {                           onEventDispatchers(                               ConstructorContract.Intent.ChangeIsMaxLengthForTextEnabled(                                   it                               )                           )                       },                       colors = CheckboxDefaults.colors(                           checkedColor = Color(0xff4d648d)                       )                   )                   Spacer(modifier = Modifier.size(5.dp))                   OutlinedTextField(                       modifier = Modifier                           .fillMaxWidth()                           .height(58.dp),                       value = if (uiState.maxLengthForText == 0) "" else uiState.maxLengthForText.toString(),                       onValueChange = {                           val numericValue = it.filter { it.isDigit() }                           onEventDispatchers(                               ConstructorContract.Intent.ChangeMaxLengthForText(                                   if (numericValue.isEmpty()) 0 else numericValue.toInt()                               )                           )                       },                       colors = OutlinedTextFieldDefaults.colors(                           focusedBorderColor = Color.LightGray,                           unfocusedBorderColor = Color.LightGray,                           focusedTextColor = Color.LightGray,                           unfocusedTextColor = Color.LightGray                       ),                       shape = RoundedCornerShape(5.dp),                       enabled = uiState.isMaxLengthForTextEnabled,                       keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),                       placeholder = {                           Text(text = "0")                       }                   )                   Spacer(modifier = Modifier.size(5.dp))               }               Spacer(modifier = Modifier.size(10.dp))               Text(                   text = "Set Min Length",                   style = TextStyle(                       fontSize = 16.sp,                       lineHeight = 24.sp,                       fontFamily = FontFamily(listOf(Font(R.font.helvetica))),                       fontWeight = FontWeight.W400,                       color = Color.White                   )               )               Spacer(modifier = Modifier.size(10.dp))               Row(                   modifier = Modifier                       .fillMaxWidth()                       .padding(horizontal = 15.dp),                   verticalAlignment = Alignment.CenterVertically               ) {                   Spacer(modifier = Modifier.size(5.dp))                   Checkbox(                       checked = uiState.isMinLengthForTextEnabled,                       onCheckedChange = {                           onEventDispatchers(                               ConstructorContract.Intent.ChangeIsMinLengthForTextEnabled(                                   it                               )                           )                       },                       colors = CheckboxDefaults.colors(                           checkedColor = Color(0xff4d648d)                       )                   )                   Spacer(modifier = Modifier.size(5.dp))                   OutlinedTextField(                       modifier = Modifier                           .fillMaxWidth()                           .height(58.dp),                       value = if (uiState.minLengthForText == 0) "" else uiState.minLengthForText.toString(),                       onValueChange = {                           val numericValue = it.filter { it.isDigit() }                           onEventDispatchers(                               ConstructorContract.Intent.ChangeMinLengthForText(                                   if (numericValue.isEmpty()) 0 else numericValue.toInt()                               )                           )                       },                       placeholder = {                           Text(text = "0")                       },                       colors = OutlinedTextFieldDefaults.colors(                           focusedBorderColor = Color.LightGray,                           unfocusedBorderColor = Color.LightGray,                           focusedTextColor = Color.LightGray,                           unfocusedTextColor = Color.LightGray                       ),                       shape = RoundedCornerShape(5.dp),                       enabled = uiState.isMinLengthForTextEnabled,                       keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)                   )                   Spacer(modifier = Modifier.size(5.dp))               }           } else if (uiState.selectedInputType == "Number") {               Text(                   text = "Set Max Value",                   style = TextStyle(                       fontSize = 16.sp,                       lineHeight = 24.sp,                       fontFamily = FontFamily(listOf(Font(R.font.helvetica))),                       fontWeight = FontWeight.W400,                       color = Color.White                   )               )               Spacer(modifier = Modifier.size(10.dp))               Row(                   modifier = Modifier                       .fillMaxWidth()                       .padding(horizontal = 15.dp),                   verticalAlignment = Alignment.CenterVertically               ) {                   Spacer(modifier = Modifier.size(5.dp))                   Checkbox(                       checked = uiState.isMaxValueForNumberEnabled,                       onCheckedChange = {                           onEventDispatchers(                               ConstructorContract.Intent.ChangeIsMaxValueForNumberEnabled(                                   it                               )                           )                       },                       colors = CheckboxDefaults.colors(                           checkedColor = Color(0xff4d648d)                       )                   )                   Spacer(modifier = Modifier.size(5.dp))                   OutlinedTextField(                       modifier = Modifier                           .fillMaxWidth()                           .height(58.dp),                       value = if (uiState.maxValueForNumber == 0) "" else uiState.maxValueForNumber.toString(),                       onValueChange = {                           val numericValue = it.filter { it.isDigit() }                           onEventDispatchers(                               ConstructorContract.Intent.ChangeMaxValueForNumber(                                   if (numericValue.isEmpty()) 0 else numericValue.toInt()                               )                           )                       },                       placeholder = {                           Text(text = "0")                       },                       colors = OutlinedTextFieldDefaults.colors(                           focusedBorderColor = Color.LightGray,                           unfocusedBorderColor = Color.LightGray,                           focusedTextColor = Color.LightGray,                           unfocusedTextColor = Color.LightGray                       ),                       shape = RoundedCornerShape(5.dp),                       enabled = uiState.isMaxValueForNumberEnabled,                       keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)                   )                   Spacer(modifier = Modifier.size(5.dp))               }               Spacer(modifier = Modifier.size(10.dp))               Text(                   text = "Set Min Value",                   style = TextStyle(                       fontSize = 16.sp,                       lineHeight = 24.sp,                       fontFamily = FontFamily(listOf(Font(R.font.helvetica))),                       fontWeight = FontWeight.W400,                       color = Color.White                   )               )               Spacer(modifier = Modifier.size(10.dp))               Row(                   modifier = Modifier                       .fillMaxWidth()                       .padding(horizontal = 15.dp),                   verticalAlignment = Alignment.CenterVertically               ) {                   Spacer(modifier = Modifier.size(5.dp))                   Checkbox(                       checked = uiState.isMinValueForNumberEnabled,                       onCheckedChange = {                           onEventDispatchers(                               ConstructorContract.Intent.ChangeIsMinValueForNumberEnabled(                                   it                               )                           )                       },                       colors = CheckboxDefaults.colors(                           checkedColor = Color(0xff4d648d)                       )                   )                   Spacer(modifier = Modifier.size(5.dp))                   OutlinedTextField(                       modifier = Modifier                           .fillMaxWidth()                           .height(58.dp),                       value = if (uiState.minValueForNumber == 0) "" else uiState.minValueForNumber.toString(),                       onValueChange = {                           val numericValue = it.filter { it.isDigit() }                           onEventDispatchers(                               ConstructorContract.Intent.ChangeMinValueForNumber(                                   if (numericValue.isEmpty()) 0 else numericValue.toInt()                               )                           )                       },                       placeholder = {                           Text(text = "0")                       },                       colors = OutlinedTextFieldDefaults.colors(                           focusedBorderColor = Color.LightGray,                           unfocusedBorderColor = Color.LightGray,                           focusedTextColor = Color.LightGray,                           unfocusedTextColor = Color.LightGray                       ),                       shape = RoundedCornerShape(5.dp),                       enabled = uiState.isMinValueForNumberEnabled,                       keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)                   )                   Spacer(modifier = Modifier.size(5.dp))               }           }           Spacer(modifier = Modifier.size(10.dp))           VisibilityComponents(               uiState = uiState,               onEventDispatchers = onEventDispatchers           )       }       "Text" -> {           ComponentsInText(               uiState = uiState,               onEventDispatchers = onEventDispatchers           )       }       "Selector" -> {           ComponentsInSelector(               uiState = uiState,               onEventDispatchers = onEventDispatchers           )       }       "MultiSelector" -> {           ComponentsInMultiSelector(               uiState = uiState,               onEventDispatchers = onEventDispatchers           )       }       "Image" -> {           ComponentsInImage(               uiState = uiState,               onEventDispatchers = onEventDispatchers           )       }       else -> {           SetId(uiState = uiState, onEventDispatchers = onEventDispatchers)           VisibilityComponents(               uiState = uiState,               onEventDispatchers = onEventDispatchers           )       }   }    Box {        Button(            modifier = Modifier                .padding(bottom = 25.dp)                .width(310.dp)                .height(50.dp)                .align(Alignment.BottomCenter),            onClick = {                onEventDispatchers(ConstructorContract.Intent.ClickCreateRowComponent())            },            shape = RoundedCornerShape(10.dp),            colors = ButtonDefaults.buttonColors(                containerColor = Color(0xff4d648d)            )        ) {            Text(                text = "Add Component in Row ",                style = TextStyle(                    fontSize = 18.sp,                    fontFamily = FontFamily(listOf(Font(R.font.roboto_regular))),                    fontWeight = FontWeight.W400,                    textAlign = TextAlign.Center                )            )        }    }}
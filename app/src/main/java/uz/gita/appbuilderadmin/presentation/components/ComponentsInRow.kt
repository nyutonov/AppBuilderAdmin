package uz.gita.appbuilderadmin.presentation.componentsimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material3.Buttonimport androidx.compose.material3.ButtonDefaultsimport androidx.compose.material3.Checkboximport androidx.compose.material3.CheckboxDefaultsimport androidx.compose.material3.OutlinedTextFieldimport androidx.compose.material3.OutlinedTextFieldDefaultsimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.font.Fontimport androidx.compose.ui.text.font.FontFamilyimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport uz.gita.appbuilderadmin.Rimport uz.gita.appbuilderadmin.presentation.RowComponentsInTextimport uz.gita.appbuilderadmin.presentation.screens.constructor.ConstructorContractimport uz.gita.appbuilderadmin.presentation.screens.constructor.InputWeightimport uz.gita.appbuilderadmin.presentation.screens.constructor.RequiredComponentimport uz.gita.appbuilderadmin.presentation.screens.constructor.SetId@Composablefun ComponentsInRow(    uiState: ConstructorContract.UiState,    onEventDispatchers: (ConstructorContract.Intent) -> Unit,) {    var weight by remember {        mutableStateOf(1f)    }    Spacer(modifier = Modifier.padding(top = 5.dp))    SetId(uiState = uiState, onEventDispatchers = onEventDispatchers)    InputWeight(uiState,onEventDispatchers)    Spacer(modifier = Modifier.size(10.dp))    Text(        text = "Components in Row",        style = TextStyle(            fontSize = 16.sp,            lineHeight = 24.sp,            fontFamily = FontFamily(listOf(Font(R.font.helvetica))),            fontWeight = FontWeight.W400,            color = Color.White        )    )    Spacer(modifier = Modifier.size(8.dp))    DemoSpinner(        list = uiState.componentList.filter { it != "Row" },        preselected = if (uiState.selectedComponent == "Row") "Input" else uiState.selectedComponent,        onSelectionChanged = {            onEventDispatchers(                ConstructorContract.Intent.ChangingSelectedComponentInRow(                    it                )            )        },        modifier = Modifier            .fillMaxWidth()            .height(56.dp)    ) {}   when(uiState.selectedComponentInRow){       "Input" -> {           ComponentsInInput(uiState = uiState, onEventDispatchers = onEventDispatchers)       }       "Text" -> {           RowComponentsInText(               uiState = uiState,               onEventDispatchers = onEventDispatchers           )       }       "Selector" -> {           RowComponentsInSelector(               uiState = uiState,               onEventDispatchers = onEventDispatchers           )       }       "MultiSelector" -> {           RowComponentsInMultiSelector(               uiState = uiState,               onEventDispatchers = onEventDispatchers           )       }       "Image" -> {           ComponentsInImage(               uiState = uiState,               onEventDispatchers = onEventDispatchers           )       }       else -> {           SetId(uiState = uiState, onEventDispatchers = onEventDispatchers)           VisibilityComponents(               uiState = uiState,               onEventDispatchers = onEventDispatchers           )       }   }    Box {        Button(            modifier = Modifier                .padding(bottom = 25.dp)                .width(310.dp)                .height(50.dp)                .align(Alignment.BottomCenter),            onClick = {                onEventDispatchers(ConstructorContract.Intent.ClickCreateRowComponent())            },            shape = RoundedCornerShape(10.dp),            colors = ButtonDefaults.buttonColors(                containerColor = Color(0xff4d648d)            )        ) {            Text(                text = "Add Component in Row ",                style = TextStyle(                    fontSize = 18.sp,                    fontFamily = FontFamily(listOf(Font(R.font.roboto_regular))),                    fontWeight = FontWeight.W400,                    textAlign = TextAlign.Center                )            )        }    }}
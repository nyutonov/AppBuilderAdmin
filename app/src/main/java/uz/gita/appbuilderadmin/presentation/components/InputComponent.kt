package uz.gita.appbuilderadmin.presentation.componentsimport androidx.compose.foundation.ExperimentalFoundationApiimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.shape.CircleShapeimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.material3.Textimport androidx.compose.material3.TextFieldimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.graphics.ColorFilterimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.TextStyleimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport uz.gita.appbuilderadmin.Rimport uz.gita.appbuilderadmin.data.model.ComponentsModel@Composablefun InputComponent(    data: ComponentsModel,    onClick: () -> Unit = {},) {    var value by remember { mutableStateOf("") }    Row(modifier = Modifier.fillMaxSize()) {        TextField(            value = value,            onValueChange = { input ->                if (data.type == "Number") {                    val numericValue = input.filter { it.isDigit() }                    if (data.isMaxValueForNumberEnabled) {                        if (numericValue.isEmpty()) {                            value = ""                        } else {                            numericValue.toIntOrNull()?.let { number ->                                if (numericValue[0] != '0' && number < data.maxValueForNumber) {                                    value = numericValue                                }                            }                        }                    } else {                        value = numericValue                    }                } else if (data.type == "Text") {                    if (data.isMaxLengthForTextEnabled) {                        if (input.length <= data.maxLengthForText) {                            value = input                        }                    } else {                        value = input                    }                } else {                    value = input                }            },            modifier = Modifier                .weight(1f)                .background(Color.Transparent)                .padding(20.dp),            placeholder = {                Text(text = data.placeHolder)            },            singleLine = true,            textStyle = TextStyle(fontSize = 18.sp),            keyboardOptions = KeyboardOptions(                keyboardType = when (data.type) {                    "Email" -> KeyboardType.Email                    "Number" -> KeyboardType.Number                    "Phone" -> KeyboardType.Phone                    else -> KeyboardType.Text                }            )        )        Image(            painter = painterResource(id = R.drawable.ic_delete),            contentDescription = "",            modifier = Modifier                .size(50.dp)                .clip(CircleShape)                .clickable { onClick() }                .align(Alignment.CenterVertically)                .padding(10.dp),            colorFilter = ColorFilter.tint(Color.White)        )    }}